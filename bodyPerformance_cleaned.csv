app,py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
import matplotlib.pyplot as plt
import seaborn as sns

# Titel
st.title("BodyPerformance: Voorspel je vetpercentage en prestatieklasse")
st.write("Voer je gegevens in en krijg direct een voorspelling van je lichaamsvetpercentage en prestatieklasse.")

# Data inladen
df = pd.read_csv("bodyPerformance_cleaned.csv", delimiter=';')
df.columns = df.columns.str.strip()
df = df.dropna()

# Encode gender en class
le = LabelEncoder()
df['gender'] = le.fit_transform(df['gender'])
df['class'] = le.fit_transform(df['class'])

# Features en targets
features = df.drop(columns=['body fat_%', 'class'])
target_reg = df['body fat_%']
target_clf = df['class']

# Splitten
X_train_r, X_test_r, y_train_r, y_test_r = train_test_split(features, target_reg, test_size=0.2, random_state=42)
X_train_c, X_test_c, y_train_c, y_test_c = train_test_split(features, target_clf, test_size=0.2, random_state=42)

# Schalen voor regressie
scaler = StandardScaler()
X_train_r_scaled = scaler.fit_transform(X_train_r)
X_test_r_scaled = scaler.transform(X_test_r)

# Modellen trainen
reg_model = RandomForestRegressor(n_estimators=300, max_depth=20, random_state=42)
reg_model.fit(X_train_r, y_train_r)

clf_model = RandomForestClassifier(n_estimators=300, max_depth=20, random_state=42)
clf_model.fit(X_train_c, y_train_c)

# Sidebar inputs
st.sidebar.header("Jouw gegevens")
gender = st.sidebar.selectbox("Geslacht:", ["Man", "Vrouw"])
age = st.sidebar.slider("Leeftijd:", 18, 80, 30)
height = st.sidebar.slider("Lengte (cm):", 140, 210, 175)
weight = st.sidebar.slider("Gewicht (kg):", 40.0, 120.0, 70.0)
grip = st.sidebar.slider("Spierkracht (grip):", 10.0, 70.0, 35.0)
diastolic = st.sidebar.slider("Diastolische BD:", 40, 120, 80)
systolic = st.sidebar.slider("Systolische BD:", 80, 200, 120)
sitbend = st.sidebar.slider("Lenigheid (voorover buigen cm):", 0.0, 50.0, 25.0)
situps = st.sidebar.slider("Aantal sit-ups:", 0, 100, 40)
broadjump = st.sidebar.slider("Breedte sprong (cm):", 100, 300, 200)

# Invoer omzetten naar DataFrame
gender_encoded = 1 if gender == "Man" else 0
user_input = pd.DataFrame([[age, gender_encoded, height, weight, diastolic, systolic, grip, sitbend, situps, broadjump]],
                          columns=features.columns)

# Regressie voorspelling
predicted_fat = reg_model.predict(user_input)[0]

# Classificatie voorspelling
predicted_class = clf_model.predict(user_input)[0]
class_map = {0: "A", 1: "B", 2: "C", 3: "D"}

# Resultaten
st.subheader("Voorspellingen")
st.write(f"**Geschat vetpercentage:** {predicted_fat:.2f}%")
st.write(f"**Ingeschatte prestatieklasse:** Klasse {class_map[predicted_class]}")

# Feature importance visualiseren
st.subheader("Belangrijkste factoren voor het model")
importances = clf_model.feature_importances_
feat_df = pd.DataFrame({'Feature': features.columns, 'Belang': importances}).sort_values(by='Belang', ascending=False)
fig, ax = plt.subplots()
sns.barplot(x='Belang', y='Feature', data=feat_df, ax=ax, palette="Blues_r")
st.pyplot(fig)
